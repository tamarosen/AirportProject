//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AirportSimulator.LogicServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlightDTO", Namespace="http://schemas.datacontract.org/2004/07/DTOs")]
    [System.SerializableAttribute()]
    public partial class FlightDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartRouteTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AirportSimulator.LogicServiceReference.State StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartRouteTime {
            get {
                return this.StartRouteTimeField;
            }
            set {
                if ((this.StartRouteTimeField.Equals(value) != true)) {
                    this.StartRouteTimeField = value;
                    this.RaisePropertyChanged("StartRouteTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AirportSimulator.LogicServiceReference.State State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="State", Namespace="http://schemas.datacontract.org/2004/07/DTOs")]
    public enum State : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Landing = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TakingOff = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LogicServiceReference.IAirportManager")]
    public interface IAirportManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportManager/SceduleNewFlight", ReplyAction="http://tempuri.org/IAirportManager/SceduleNewFlightResponse")]
        bool ScheduleNewFlight(AirportSimulator.LogicServiceReference.FlightDTO flightDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirportManager/SceduleNewFlight", ReplyAction="http://tempuri.org/IAirportManager/SceduleNewFlightResponse")]
        System.Threading.Tasks.Task<bool> ScheduleNewFlightAsync(AirportSimulator.LogicServiceReference.FlightDTO flightDTO);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAirportManagerChannel : AirportSimulator.LogicServiceReference.IAirportManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AirportManagerClient : System.ServiceModel.ClientBase<AirportSimulator.LogicServiceReference.IAirportManager>, AirportSimulator.LogicServiceReference.IAirportManager {
        
        public AirportManagerClient() {
        }
        
        public AirportManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AirportManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirportManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirportManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ScheduleNewFlight(AirportSimulator.LogicServiceReference.FlightDTO flightDTO) {
            return base.Channel.ScheduleNewFlight(flightDTO);
        }
        
        public System.Threading.Tasks.Task<bool> ScheduleNewFlightAsync(AirportSimulator.LogicServiceReference.FlightDTO flightDTO) {
            return base.Channel.ScheduleNewFlightAsync(flightDTO);
        }
    }
}
