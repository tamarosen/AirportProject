//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AirportLogicService.RepositoryServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RepositoryServiceReference.IRepository")]
    public interface IRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/GetFutureFlights", ReplyAction="http://tempuri.org/IRepository/GetFutureFlightsResponse")]
        DTOs.FlightDTO[] GetFutureFlights();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/GetFutureFlights", ReplyAction="http://tempuri.org/IRepository/GetFutureFlightsResponse")]
        System.Threading.Tasks.Task<DTOs.FlightDTO[]> GetFutureFlightsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/AddFlightToSchedule", ReplyAction="http://tempuri.org/IRepository/AddFlightToScheduleResponse")]
        DTOs.FlightDTO AddFlightToSchedule(DTOs.FlightDTO flight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/AddFlightToSchedule", ReplyAction="http://tempuri.org/IRepository/AddFlightToScheduleResponse")]
        System.Threading.Tasks.Task<DTOs.FlightDTO> AddFlightToScheduleAsync(DTOs.FlightDTO flight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/AddFlightInfoToHistory", ReplyAction="http://tempuri.org/IRepository/AddFlightInfoToHistoryResponse")]
        void AddFlightInfoToHistory(DTOs.FlightInfoDTO flightInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/AddFlightInfoToHistory", ReplyAction="http://tempuri.org/IRepository/AddFlightInfoToHistoryResponse")]
        System.Threading.Tasks.Task AddFlightInfoToHistoryAsync(DTOs.FlightInfoDTO flightInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/UpdateStationState", ReplyAction="http://tempuri.org/IRepository/UpdateStationStateResponse")]
        void UpdateStationState(DTOs.StationDTO stationDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/UpdateStationState", ReplyAction="http://tempuri.org/IRepository/UpdateStationStateResponse")]
        System.Threading.Tasks.Task UpdateStationStateAsync(DTOs.StationDTO stationDTO);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRepositoryChannel : AirportLogicService.RepositoryServiceReference.IRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RepositoryClient : System.ServiceModel.ClientBase<AirportLogicService.RepositoryServiceReference.IRepository>, AirportLogicService.RepositoryServiceReference.IRepository {
        
        public RepositoryClient() {
        }
        
        public RepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DTOs.FlightDTO[] GetFutureFlights() {
            return base.Channel.GetFutureFlights();
        }
        
        public System.Threading.Tasks.Task<DTOs.FlightDTO[]> GetFutureFlightsAsync() {
            return base.Channel.GetFutureFlightsAsync();
        }
        
        public DTOs.FlightDTO AddFlightToSchedule(DTOs.FlightDTO flight) {
            return base.Channel.AddFlightToSchedule(flight);
        }
        
        public System.Threading.Tasks.Task<DTOs.FlightDTO> AddFlightToScheduleAsync(DTOs.FlightDTO flight) {
            return base.Channel.AddFlightToScheduleAsync(flight);
        }
        
        public void AddFlightInfoToHistory(DTOs.FlightInfoDTO flightInfo) {
            base.Channel.AddFlightInfoToHistory(flightInfo);
        }
        
        public System.Threading.Tasks.Task AddFlightInfoToHistoryAsync(DTOs.FlightInfoDTO flightInfo) {
            return base.Channel.AddFlightInfoToHistoryAsync(flightInfo);
        }
        
        public void UpdateStationState(DTOs.StationDTO stationDTO) {
            base.Channel.UpdateStationState(stationDTO);
        }
        
        public System.Threading.Tasks.Task UpdateStationStateAsync(DTOs.StationDTO stationDTO) {
            return base.Channel.UpdateStationStateAsync(stationDTO);
        }
    }
}
